<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://divyanshugit.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://divyanshugit.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-25T15:13:58+00:00</updated><id>https://divyanshugit.github.io/feed.xml</id><title type="html">Divyanshu Kumar</title><subtitle>I&apos;m a ML Reserach Engineer at Enkrypt AI, where I work on finding vulnerability of Gen AI models and developing tools to make the Gen AI usecase safe and secure. </subtitle><entry><title type="html">Exploring Llama.cpp with Llama Models</title><link href="https://divyanshugit.github.io/blog/2024/llm-quantization/" rel="alternate" type="text/html" title="Exploring Llama.cpp with Llama Models"/><published>2024-08-25T00:00:00+00:00</published><updated>2024-08-25T00:00:00+00:00</updated><id>https://divyanshugit.github.io/blog/2024/llm-quantization</id><content type="html" xml:base="https://divyanshugit.github.io/blog/2024/llm-quantization/"><![CDATA[<p>While thinking about what to do this weekend, I decided to revisit and update the paper <code class="language-plaintext highlighter-rouge">Fine-Tuning, Quantization, and LLMs: Navigating Unintended Outcomes</code> with the latest models and additional insights on quantization. As I dug deeper into new references, I realized that the vulnerability aspect of model quantization hasn’t been thoroughly explored. Previously, we used an off-the-shelf model to perform quick experiments, thanks to <a href="https://huggingface.co/TheBloke">The Bloke</a> . Now, let’s dive into the latest findings and learn more about how to quantize models.</p> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/llama_cpp-480.webp 480w,/assets/img/llama_cpp-800.webp 800w,/assets/img/llama_cpp-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/llama_cpp.jpeg" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="open-source-libraries-for-model-quantization">Open-Source Libraries for Model Quantization</h2> <p>During my research, I identified three standout open-source packages that are particularly effective for LLM quantization:</p> <ul> <li><strong>Llama.cpp</strong>: A versatile tool that quickly became my go-to solution.</li> <li><strong>GPTQ</strong>: Another robust option worth considering.</li> <li><strong>AWQ</strong>: Completes the trio with its unique strengths.</li> </ul> <p>I started with <strong>Llama.cpp</strong> and found it met all my requirements. So, I decided to move forward with this one. Let’s dive into how to set up and use Llama.cpp.</p> <h3 id="setting-up-llamacpp-locally">Setting Up Llama.cpp Locally</h3> <p>The first step in our journey is to set up Llama.cpp on your local machine. Start by cloning the repository and getting familiar with its structure:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:ggerganov/llama.cpp.git
<span class="nb">cd</span> ~/llama.cpp
</code></pre></div></div> <p>Once the repository is cloned, you’ll need to install Llama.cpp locally. The following commands will ensure everything is set up correctly:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">-e</span> <span class="nb">.</span>  <span class="c"># Installs Llama.cpp in editable mode</span>
pip <span class="nb">install</span> <span class="nt">-r</span> requirements/requirements-convert_hf_to_gguf.txt
</code></pre></div></div> <p>Now that the basic setup is complete, the next step is to build the necessary binaries for quantization. This is crucial for optimizing the models we’ll be working with:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make llama-quantize
</code></pre></div></div> <p>In addition to this, we’ll also build the command-line interface (CLI) tool, which will allow us to validate models quickly and efficiently:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>make llama-cli
</code></pre></div></div> <p>With these tools in place, you’re now fully equipped to start experimenting with LLM quantization.</p> <p>We’ll start by targeting the following Llama models, known for their robustness against jailbreak attacks:</p> <ul> <li><strong>CodeLlama-7b</strong>: A highly capable model for code-related tasks.</li> <li><strong>Llama-2-7b-chat-hf</strong>: Excellent for conversational AI.</li> <li><strong>Llama-3-8b-instruct</strong>: A model designed for instructional tasks.</li> <li><strong>Llama-3.1-8b-instruct</strong>: An enhanced version of Llama-3, offering even greater capabilities.</li> </ul> <h3 id="downloading-and-preparing-model-weights">Downloading and Preparing Model Weights</h3> <p>To facilitate quick experimentation, I prefer to download model weights locally. This approach allows for faster processing and easier manipulation of the models. However, if you prefer, you can directly use the <code class="language-plaintext highlighter-rouge">--repo</code> flag in <code class="language-plaintext highlighter-rouge">llama-quantize</code> to work with models from the Hugging Face repository.</p> <p>Here’s a Python script to download the models:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vim download_models.py
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">huggingface_hub</span> <span class="kn">import</span> <span class="n">snapshot_download</span>

<span class="n">model_ids</span> <span class="o">=</span> <span class="p">[</span>
    <span class="sh">"</span><span class="s">meta-llama/CodeLlama-7b-hf</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">meta-llama/Llama-2-7b-chat-hf</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">meta-llama/Meta-Llama-3-8B-Instruct</span><span class="sh">"</span><span class="p">,</span>
    <span class="sh">"</span><span class="s">meta-llama/Meta-Llama-3.1-8B-Instruct</span><span class="sh">"</span>
<span class="p">]</span>

<span class="k">for</span> <span class="n">model_id</span> <span class="ow">in</span> <span class="n">model_ids</span><span class="p">:</span>
    <span class="nf">snapshot_download</span><span class="p">(</span>
        <span class="n">repo_id</span><span class="o">=</span><span class="n">model_id</span><span class="p">,</span>
        <span class="n">local_dir</span><span class="o">=</span><span class="n">model_id</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="sh">"</span><span class="s">/</span><span class="sh">"</span><span class="p">)[</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nf">lower</span><span class="p">().</span><span class="nf">replace</span><span class="p">(</span><span class="sh">"</span><span class="s">-</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">_</span><span class="sh">"</span><span class="p">),</span>
        <span class="n">local_dir_use_symlinks</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span>
    <span class="p">)</span>
</code></pre></div></div> <h3 id="converting-and-quantizing-models">Converting and Quantizing Models</h3> <p>After downloading the models, the next step is to convert them to the GGUF format, which is necessary for further quantization. We’ll start by converting the models to <code class="language-plaintext highlighter-rouge">fp16</code>, which stands for 16-bit floating point precision. To do this we can directly use the <code class="language-plaintext highlighter-rouge">conver_hf_to_gguf.py</code>. Though I’ve modified it play around things that how much we can do with the python wrapper of it. If you’re interested then you can find it over <a href="https://github.com/divyanshugit/quantization/convert_hf.py">here</a></p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">python</span> <span class="n">convert_hf</span><span class="p">.</span><span class="n">py</span> <span class="n">meta_llama</span><span class="o">-</span><span class="mf">3.1_8</span><span class="n">b_instruct</span> <span class="o">--</span><span class="n">outfile</span> <span class="n">llama_3</span><span class="p">.</span><span class="mi">1</span><span class="n">_qf_16</span><span class="p">.</span><span class="n">gguf</span> <span class="o">--</span><span class="n">outtype</span> <span class="sh">"</span><span class="s">f16</span><span class="sh">"</span>
</code></pre></div></div> <p>Once the models are in GGUF format, we can proceed with quantizing them to 2-bit, 4-bit, and 8-bit representations. For instance, here’s how to convert the model to an 4-bit format:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./llama-quantize meta_llama_3.1_qf_16.gguf llama_3.1_8b_Q4_K_M.gguf Q4_K_M
</code></pre></div></div> <h3 id="validating-the-quantized-model">Validating the Quantized Model</h3> <p>With the quantized model in hand, it’s essential to validate its performance. The <code class="language-plaintext highlighter-rouge">llama-cli</code> tool we built earlier will come in handy for this task. Here’s a command to test the model and assess its speed and accuracy:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./lama-cli <span class="nt">-m</span> llama_3.1_8b_Q4_K_M.gguf <span class="nt">-p</span> <span class="s2">"You are a helpful assistant"</span> <span class="nt">-cnv</span>
</code></pre></div></div> <div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/response-480.webp 480w,/assets/img/response-800.webp 800w,/assets/img/response-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/response.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="conclusion">Conclusion</h3> <p>Quantizing models is an effective strategy for optimizing them, particularly when dealing with limited resources. The tools and techniques we’ve explored provide a strong starting point for anyone interested in LLM quantization. For those curious to see the results in action, all the quantized models we discussed are available on Hugging Face in the Quantized-Llama Collection.</p> <p>Additionally, if you want; you can use <code class="language-plaintext highlighter-rouge">llama-cpp-python</code> for model inference, as <code class="language-plaintext highlighter-rouge">ctransformers</code> is currently not updated to support the latest model architectures.</p> <h3 id="references">References:</h3> <ul> <li><a href="https://github.com/ggerganov/llama.cpp">Llama.cpp</a></li> <li><a href="https://github.com/abetlen/llama-cpp-python">llama-cpp-python</a></li> <li><a href="https://arxiv.org/abs/2404.04392">Fine-Tuning, Quantization, and LLMs: Navigating Unintended Outcomes</a></li> </ul>]]></content><author><name></name></author><category term="language-models"/><category term="LLMs"/><category term="Quantization"/><summary type="html"><![CDATA[Quantizing models for fun.]]></summary></entry><entry><title type="html">🔍 InterrogateLLM: In Search of Truth</title><link href="https://divyanshugit.github.io/blog/2024/interrogate_llm/" rel="alternate" type="text/html" title="🔍 InterrogateLLM: In Search of Truth"/><published>2024-04-28T00:00:00+00:00</published><updated>2024-04-28T00:00:00+00:00</updated><id>https://divyanshugit.github.io/blog/2024/interrogate_llm</id><content type="html" xml:base="https://divyanshugit.github.io/blog/2024/interrogate_llm/"><![CDATA[<div class="row"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/interrogatellm-480.webp 480w,/assets/img/interrogatellm-800.webp 800w,/assets/img/interrogatellm-1400.webp 1400w," sizes="95vw" type="image/webp"/> <img src="/assets/img/interrogatellm.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" title="example image" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>In the world of LLMs, one big puzzle is hallucination. It’s when LLM makes up stuff that isn’t true, and it’s been confusing experts for a long time. This makes it hard to trust what LLM says. There is a new paper called <a href="https://arxiv.org/abs/2403.02889">InterrogateLLM</a> by <a href="https://itzikmalkiel.github.io/">Itzik Malkiel</a> and Yakir Yehuda that might help clear things up.</p> <p>To identify hallucination in an answer, it does something simple: it asks the model a bunch of times to recreate the original question using the answer it generated, much like SelfCheckGPT, which examines hallucination in the response. Then, InterrogateLLM measures how much the new versions of the question differ from the original one. When there’s a big difference, it suggests there might be a hallucination. Basically, if the model is making stuff up, it won’t be able to stick to the original question when asked to repeat it. This way of questioning forms the core of our method for finding hallucinations in answers.</p> <h2 id="heres-how-the-entire-process-works">Here’s how the entire process works</h2> <p><strong>Step 1: Generating Answers from Query</strong></p> <p>We start with asking the LLM to provide answers to a given question, saving the answers for later examination and reconstruction.</p> <p><strong>Step 2: Reconstructing Queries from Answers</strong></p> <p>This is where the real magic happens. Building on the answers from the previous step, InterrogateLLM uses a backward process to piece together the original question. By carefully comparing the generated answers with the intended question, the system reconstructs what was initially asked.</p> <p><strong>Step 3: Generating Text Embeddings of Queries &amp; Reconstructed Queries</strong></p> <p>Now, with both the original question and its reconstructed version on hand, InterrogateLLM creates text embeddings for each. Text embeddings transform textual information into high-dimensional vectors, making it easier to compare and analyze them.</p> <p><strong>Final Step: Predicting Hallucinations with SBERT</strong></p> <p>The final piece of the puzzle involves using SBERT(Sentence-BERT). By comparing the text embeddings of the original question and its reconstruction, SBERT determines if there’s any hallucination. If the similarity is below a certain threshold, suggesting significant deviation between the two, it raises a flag for potential hallucination.</p> <p>While not a complete solution to the hallucination problem, InterrogateLLM represents a promising step toward more reliable and trustworthy language AI systems. Where it provides a systematic framework for identifying hallucination in any domain by assessing the discrepancy between the intended query and the generated response. As research in this area progresses, we can expect further improvements and innovations to solve the problem of Hallucinations.</p>]]></content><author><name></name></author><category term="language-models"/><category term="LLMs"/><category term="Hallucinations"/><summary type="html"><![CDATA[Explore how InterrogateLLM addresses AI hallucination in a straightforward manner.]]></summary></entry></feed>